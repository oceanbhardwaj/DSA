/*package whatever //do not write package name here */

import java.util.*;

class GFG {
	public static void main (String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		 int max=0;
		ArrayList<ArrayList<Integer>>adj=new ArrayList<>();
		for(int i=0;i<=n;i++)
		{
		    adj.add(new ArrayList<>());
		}
		int start=0;
		for(int i1=0;i1<n-1;i1++)
		{
		    int a=sc.nextInt();
		    if(start==0)
		     start=a;
		    int b=sc.nextInt();
		    addEdge(adj,a,b);}
		    int dist[]=new int[n+1];
		    boolean visited[]=new boolean[n+1];
		   int d= bfs(start,adj,visited,dist);
		  //stem.out.println("d"+d);
		   Arrays.fill(dist,0);
		    Arrays.fill(visited,false);
		   bfs(d,adj,visited,dist);
		  
		  
		   for(int i=0;i<n;i++)
		   {
		       max=Math.max(dist[i],max);
		   }
		 
		    
		    
		
	     System.out.println(max);
	}
		public static void addEdge(ArrayList<ArrayList<Integer>> adj,int start,int end)
		{
		    adj.get(start).add(end);
		    adj.get(end).add(start);
		}
public static int bfs(int d,ArrayList<ArrayList<Integer>> adj,boolean visited[],int dist[])
		{
		    int index=0;
		    Queue<Integer> q=new LinkedList<>();
		    q.add(d);
		    visited[d]=true;
		    while(!q.isEmpty())
		    {
		        int curr1=q.poll();
		        index=curr1;
		        for(int j=0;j<adj.get(curr1).size();j++){
		        //sited[curr]=true;
		        int curr=adj.get(curr1).get(j);
		       if(!visited[curr])
		        {
		            visited[curr]=true;
		            dist[curr]=dist[curr1]+1;
		            q.add(curr);
		        }}
		    }
		    return index;
		}
		
	
}